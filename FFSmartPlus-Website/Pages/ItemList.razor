@page "/ItemList"
@using MatBlazor;


<link href="_content/MatBlazor/dist/matBlazor.css" rel="stylesheet" />
<link href="~/css/TabStylings.css" rel="stylesheet" />
<div class="pageTitle">
    <MatHeadline3 id="pageTitle">Item Management</MatHeadline3>
</div>
@if (currentUserRole == null)
{
    <p> Please log in to view this page.</p>
}else{
<MatTabGroup id="tabGroup">
    <MatTab Label="View Item">
        <div class="tabSubtitle">
            <MatHeadline4>Choose Item to Manage</MatHeadline4>
        </div>
            @*<p><MatTextField @bind-Value="@inputID" @oninput="@((e) => { inputID=(string)e.Value;})" Label="Item ID"></MatTextField> </p>
            <p @bind="@itemErrorMessage" id="ItemErrorMessage" style="color:red; display:none;"> Item can not be found. </p>
            *@
            <div class="itemInput">
                <MatSelect Label="Pick an Item" Outlined="true" ValueChanged="(string i) => onChangeItem(i)">
                @foreach (var item in itemsToList()){
                    <MatOptionString Value="@item.Id.ToString()">@item.Name.ToString()</MatOptionString>
                }
                </MatSelect>
            </div>

            @*<MatButton @onclick="() => loadItem(inputID)"> Find Item</MatButton>*@
        @*<div class="tabSubtitle">
            <h2> View Items</h2>
        </div>*@
        <div class="InventoryView">
            @if (itemInfo != null)
            {
                <MatCard class="item-card">
                    <MatCardContent>
                        <MatCardMedia Wide="false" ImageUrl=""></MatCardMedia>
                        <div class="item-card-content">
                            <div class="itemID">
                                <small>Item ID: @itemInfo.Id</small>
                            </div>
                            <div class="itemID">
                                <small>Supplier ID: @itemInfo.SupplierId</small>
                            </div>
                            <MatHeadline2>@itemInfo.Name</MatHeadline2>
                            <MatHeadline4>Unit Description: @itemInfo.UnitDesc</MatHeadline4>
                            <MatHeadline4>Minimum Stock: @itemInfo.MinimumStock</MatHeadline4>
                            <MatHeadline4>Desired Stock: @itemInfo.DesiredStock</MatHeadline4>
                        </div>
                        @if (unitStock != null)
                        {
                            <div class="item-card-quantity-info">
                                @foreach (var quantityData in unitStock)
                                {
                                    <br> 
                                    <div class="itemID">
                                        <small> Current Stock</small>
                                        </div>
                                        <br />
                                    <MatBody1>Quantity: @quantityData.Quantity units remaining<br>
                                    Expiry Date: @quantityData.ExpiryDate.ToString("dd/MM/yyyy")</MatBody1>
                                }


                            </div>
                        }
                        else
                        {
                            <div class="item-card-quantity-info">
                                <MatBody1>Item has no stock.</MatBody1>
                            </div>
                        }
                    </MatCardContent>
                    @if (currentUserRole.Contains("Admin") || currentUserRole.Contains("HeadChef"))
                    {
                        <MatCardActions>
                            <MatButton @onclick="() => deleteItem(itemInfo.Id)"> Remove Item</MatButton>
                        <MatButton @onclick="() => modifyItemOption()"> Modify Item</MatButton>
                    </MatCardActions>
                    }
                </MatCard>

                @if (showItemModifyContent == "True")
                {
                    <p> Leave field blank if you would like to take the original values.</p>
                    <p>
                        <MatTextField Label="Item Name" @bind-Value="@inputItemNameM"></MatTextField>
                    </p>
                    <p>
                        <MatTextField @bind-Value="@inputItemMinStockM" Label="Minimum Stock"></MatTextField>
                    </p>
                    <p>
                        <MatTextField @bind-Value="@inputItemDesiredStockM" Label="Desired Stock"></MatTextField>
                    </p>
                    <p>
                        <MatTextField @bind-Value="@inputSupplierIDM" Label="Supplier ID"></MatTextField>
                    </p>
                    <p>
                        <MatTextField @bind-Value="@inputUnitDescM" Label="Unit Description"></MatTextField>
                    </p>
                    <MatButton @onclick="() => modifyItem(inputItemNameM, inputItemMinStockM, inputItemDesiredStockM, inputSupplierIDM, inputUnitDescM)"> Modify Item</MatButton>

                }

                @if (itemModifySuccess == "True"){
                    Toaster.Add("Item Successfully Changed", MatToastType.Success, "Change Item");
                    toastStatus();
                    contentStatus();
                    StateHasChanged();
                    }else if (itemModifySuccess == "False"){
                    Toaster.Add("Item change not saved.", MatToastType.Warning, "Change Item");
                }

            }
            else if (itemFound == "False")
            {
                Toaster.Add("Item could not be found", MatToastType.Danger, "Item");
                itemFoundStatus();
            }
            else
            {
                <br />
                <p class="viewItemText"> Please choose an item to view item information. </p>
            }
        </div>

    </MatTab>
   @if (currentUserRole.Contains("Admin") || currentUserRole.Contains("HeadChef")){
        <MatTab Label="Add Item">
            <div class="itemInput">
                <div class="tabSubtitle">
                    <MatHeadline4>Add Item Management</MatHeadline4>
                </div>
                <p>
                    <MatTextField Label="Item Name" @bind-Value="@inputItemName"></MatTextField>
                </p>
                <p>
                    <MatTextField @bind-Value="@inputUnitDesc" Label="Unit Description"></MatTextField>
                </p>
                <p>
                    <MatTextField @bind-Value="@inputItemMinStock" Label="Minimum Stock"></MatTextField>
                </p>
                <p>
                    <MatTextField @bind-Value="@inputItemDesiredStock" Label="Desired Stock"></MatTextField>
                </p>
                <p>
                    <MatTextField @bind-Value="@inputSupplierID" Label="Supplier ID"></MatTextField>
                </p>

                <!-- The input boxes above are passed to the addNewItem function on the click of the Add Item button below-->

                <MatButton @onclick="() => addNewItem(inputItemName,inputUnitDesc, inputItemMinStock, inputSupplierID, inputItemDesiredStock )"> Add Item</MatButton>

                @if (itemAdditionSuccess == "True")
                {
                    Toaster.Add("Item successfully added, please add stock information.", MatToastType.Info, "Stock");
                    toastStatus();

                    <p>
                        <MatTextField @bind-Value="@inputUnitQuantity" Label="Unit Quantity"></MatTextField>
                    </p>

                    <p>
                        <MatDatePicker TValue="DateTime" AllowInput="true" EnableTime="true" Label="Unit Expiry Date" @bind-Value="@inputUnitExpDate"> </MatDatePicker>
                    </p>
                    <MatButton @onclick="() => addStock (inputUnitQuantity,inputUnitExpDate)">Add Stock</MatButton>

                }else if (itemAdditionSuccess == "False"){
                        Toaster.Add("New item not saved", MatToastType.Info, "Item");
                        toastStatus();
                        StateHasChanged();

                }

        
            <br />

        </div>

        @if (stockModifySuccess == "True")
        {
            Toaster.Add("Stock Changed Successfully", MatToastType.Success, "Stock");
            toastStatus();
            StateHasChanged();
        }
        else if
        (stockModifySuccess == "False")
        {
            Toaster.Add("Stock Not Added.", MatToastType.Warning, "Stock");
            toastStatus();
        }
    </MatTab>
    
    }

    <MatTab Label="Add Stock to Existing Item">
        <div class="tabSubtitle">
            <MatHeadline4>Add Stock to Existing Item</MatHeadline4>
        </div>
        <div class="itemInput">
            <p>
                <MatTextField @bind-Value="@inputItemIdE" Label="Item Id"></MatTextField>
            </p>
            <p>
                <MatTextField @bind-Value="@inputUnitQuantityE" Label="Unit Quantity"></MatTextField>
            </p>
            <p>
                <MatDatePicker TValue="DateTime" AllowInput="true" EnableTime="true" Label="Unit Expiry Date" @bind-Value="@inputUnitExpDateE"> </MatDatePicker>
            </p>
            <MatButton @onclick="() => addStockExisting (inputUnitQuantityE,inputUnitExpDateE,inputItemIdE)">Add Stock</MatButton>
        </div>

        @if (stockModifySuccess == "True")
        {
            Toaster.Add("Stock Changed Successfully", MatToastType.Success, "Stock");
            toastStatus();
            StateHasChanged();
        }
        else if
        (stockModifySuccess == "False")
        {
            Toaster.Add("Stock not changed.", MatToastType.Warning, "Stock");
            toastStatus();
        }
    </MatTab>

    <MatTab Label = "Remove Stock">
        <div class="tabSubtitle">
            <MatHeadline4>Remove Stock</MatHeadline4>
        </div>
        <div class="itemInput">
            <p>
                <MatTextField @bind-Value="@inputItemIdR" Label="Item Id"></MatTextField>
            </p>
            <p>
                <MatTextField @bind-Value="@inputUnitQuantityR" Label="Unit Quantity"></MatTextField>
            </p>
            <MatButton @onclick="() => removeStock (inputUnitQuantityR,inputItemIdR)">Remove Stock</MatButton>
        </div>
        @if (stockModifySuccess == "True")
        {
            Toaster.Add("Stock Changed Successfully", MatToastType.Success, "Stock");
            toastStatus();
            StateHasChanged();
       }
        else if
        (stockModifySuccess == "False")
        {
            Toaster.Add("Stock not changed.", MatToastType.Warning, "Stock");
            toastStatus();
        }
    </MatTab>
</MatTabGroup>

<br />
<br />
}