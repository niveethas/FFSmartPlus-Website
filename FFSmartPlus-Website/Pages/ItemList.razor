@page "/ItemList"
@using MatBlazor;


<link href="_content/MatBlazor/dist/matBlazor.css" rel="stylesheet" />
<link href="~/css/TabStylings.css" rel="stylesheet" />

<MatHeadline3>Item Management</MatHeadline3>
<MatTabGroup>
    <MatTab Label="View Item">
        <div class="tabSubtitle">
            <MatHeadline4>Choose item to manage</MatHeadline4>
        </div>
            <p>    <MatTextField @bind-Value="@inputID" @oninput="@((e) => { inputID=(string)e.Value;})" Label="Item ID"></MatTextField> </p>
            <p @bind="@itemErrorMessage" id="ItemErrorMessage" style="color:red; display:none;"> Item can not be found. </p>
            <MatButton @onclick="() => loadItem(inputID)"> Find Item</MatButton>
        <div class="tabSubtitle">
            <h2> View Items</h2>
        </div>

        <div class="InventoryView">
            @if (itemInfo != null) {
                <MatCard class="item-card">
                <MatCardContent>
                    <MatCardMedia Wide="false" ImageUrl=""></MatCardMedia>
                    <div class="item-card-content">
                        <MatHeadline2>@itemInfo.Name</MatHeadline2>
                        <MatHeadline4>@itemInfo.Id</MatHeadline4>
                    </div>
                    <div class="item-card-quantity-info">
                        @foreach (var quantityData in unitStock) {
                            <MatBody1>Quantity: @quantityData.Quantity units remaining</MatBody1>
                            <MatBody2>Expiry Date: @quantityData.ExpiryDate.ToString("dd/MM/yyyy HH:mm")</MatBody2>
                        }
                    </div>
                </MatCardContent>
                <MatCardActions>
                    <MatButton @onclick="() => deleteItem(itemInfo.Id)"> Remove Item</MatButton>
                </MatCardActions>
                </MatCard>
            } else {
                <p> Please enter item ID to view relevant information.</p>
            }
        </div>

    </MatTab>
   @* @if (currentRoles.Contains("HeadChef") || currentRoles.Contains("Delivery"))
    {*@
        <MatTab Label="Add Item">
            <div>
                <h2> Add Item Management</h2>
                <p>
                    <MatTextField Label="Item Name" @bind-Value="@inputItemName"></MatTextField>
                </p>
                <p>
                    <MatTextField @bind-Value="@inputUnitDesc" Label="Unit Description"></MatTextField>
                </p>
                <p>
                    <MatTextField @bind-Value="@inputItemMinStock" Label="Minimum Stock"></MatTextField>
                </p>
                <p>
                    <MatTextField @bind-Value="@inputItemDesiredStock" Label="Desired Stock"></MatTextField>
                </p>
                <p>
                    <MatTextField @bind-Value="@inputSupplierID" Label="Supplier ID"></MatTextField>
                </p>

                <!-- The input boxes above are passed to the addNewItem function on the click of the Add Item button below-->

                <MatButton @onclick="() => addNewItem(inputItemName,inputUnitDesc, inputItemMinStock, inputSupplierID, inputItemDesiredStock )"> Add Item</MatButton>

                @if (itemAdditionSuccess == true)
                {
                    Toaster.Add("Item successfully added, please add stock information.", MatToastType.Info, "Stock");

                    <p>
                        <MatTextField @bind-Value="@inputUnitQuantity" Label="Unit Quantity"></MatTextField>
                    </p>

                    <p>
                        <MatDatePicker TValue="DateTime" AllowInput="true" EnableTime="true" Label="Unit Expiry Date" @bind-Value="@inputUnitExpDate"> </MatDatePicker>
                    </p>
                    <MatButton @onclick="() => addStock (inputUnitQuantity,inputUnitExpDate)">Add Stock</MatButton>

                }

            <br />

        </div>
    </MatTab>
    
    <MatTab Label="Add Stock to Existing Item">
        <p>
            <MatTextField @bind-Value="@inputItemIdE" Label="Item Id"></MatTextField>
        </p>
        <p>
            <MatTextField @bind-Value="@inputUnitQuantityE" Label="Unit Quantity"></MatTextField>
        </p>

        <p>
            <MatDatePicker TValue="DateTime" AllowInput="true" EnableTime="true" Label="Unit Expiry Date" @bind-Value="@inputUnitExpDateE"> </MatDatePicker>
        </p>
        <MatButton @onclick="() => addStock (inputUnitQuantity,inputUnitExpDate)">Add Stock</MatButton>
    </MatTab>

</MatTabGroup>

<br />
<br />

@code{

}