@page "/t"
@using MatBlazor;

<link href="_content/MatBlazor/dist/matBlazor.css" rel="stylesheet" />

<div>
    <h2> Choose item to manage</h2>
    <p>    <MatTextField @bind-Value="@inputID" @oninput="@((e) => { inputID=(string)e.Value;})" Label="Item ID" ></MatTextField> </p>
    <p @bind="@itemErrorMessage" id="ItemErrorMessage" style="color:red; display:none;"  > Item can not be found. </p>
    <MatButton @onclick="() => loadItem(inputID)"> Find Item</MatButton>
</div>
<!--The item id is input by the user and passed to the loadItem function -->

<div>

    
<h2> View Items</h2>

@if (itemInfo != null){
        <p> id: @itemInfo.Id </p>
        <p> name: @itemInfo.Name</p>
        <MatButton @onclick="() => deleteItem(itemInfo.Id)"> Remove Item</MatButton>
        <!-- the item is loaded if the id is found, and the ID is passed to the deleteItem function-->
        @foreach (var x in unitStock)
        {

            <p>expiry: @x.ExpiryDate</p>
            <p>quantity: @x.Quantity</p>

        }
}
   else{
       <p> Please enter item ID to view relevant information. </p>
   }     
       
    
       
</div>

<div>
    <h2> Add Item Management</h2>
        <p>
            <MatTextField Label="Item Name" @bind-Value="@inputItemName"></MatTextField>
        </p>
        <p>
            <MatTextField @bind-Value="@inputUnitDesc" Label="Unit Description"></MatTextField>
        </p>
        <p>
            <MatTextField @bind-Value="@inputItemMinStock" Label="Minimum Stock"></MatTextField>
        </p>
        <p>
        <MatTextField @bind-Value="@inputItemDesiredStock" Label="Desired Stock"></MatTextField>
        </p>
    <p>
        <MatTextField @bind-Value="@inputSupplierID" Label="Supplier ID"></MatTextField>
    </p>
    @if (itemAdditionSuccess == true)
    {
        
        <p>
            <MatTextField @bind-Value="@inputUnitQuantity" Label="Unit Quantity"></MatTextField>
        </p>
    
            <p>
            <MatDatePicker TValue="DateTime" AllowInput="true" EnableTime="true" Label="Unit Expiry Date" @bind-Value="@inputUnitExpDate"> </MatDatePicker>
            </p>
            <MatButton @onclick="() => addStock (inputUnitQuantity,inputUnitExpDate)">Add Stock</MatButton>
    }
        
<br />

    <!-- The input boxes above are passed to the addNewItem function on the click of the Add Item button below-->

        <MatButton @onclick="() => addNewItem(inputItemName,inputUnitDesc, inputItemMinStock, inputSupplierID )"> Add Item</MatButton>
        
</div>

<br />
<br />

@code{

}